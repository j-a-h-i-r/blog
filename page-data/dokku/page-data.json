{"componentChunkName":"component---src-templates-blog-post-js","path":"/dokku/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"a2ef8c1c-7bc8-56eb-9965-e49d9151d1fe","excerpt":"I’ve recently discovered dokku. I was setting up some of my personal projects in a DigitalOcean droplet like a caveman and was looking for alternative. Dokku…","html":"<p>I’ve recently discovered <a href=\"https://dokku.com/\">dokku</a>. I was setting up some of my personal projects in a DigitalOcean droplet like a caveman and was looking for alternative. Dokku appeared in my search results like a blessing.</p>\n<p>I followed the <a href=\"https://dokku.com/docs/deployment/application-deployment/\">getting started guide</a> and set up the demo application in my server easily. So I then moved to host one of my react projects in cloud.</p>\n<p>I looked around to see if there is any ready-made solution supported by Dokku. But I could not find any solution specific to react. Dokku provides a <a href=\"https://github.com/dokku/heroku-buildpack-nginx\">buildpack for deploying a static site</a>. It also supports building the static assets! While that is nice, it was difficult to deploy the react app along with the API.</p>\n<p>I found <a href=\"https://github.com/heroku/heroku-buildpack-static\">heroku-buildpack-static</a> which is provided by Heroku. It is way more easily configurable and fit my use case perfectly.</p>\n<h3>Setting up the stage</h3>\n<p>We actually need 2 buildpacks. First buildpack will build the react app and the second one will deploy the static files.</p>\n<p>So, add a <code class=\"language-text\">.buildpacks</code> file and put the following content in the file</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://github.com/heroku/heroku-buildpack-nodejs.git\nhttps://github.com/heroku/heroku-buildpack-static.git</code></pre></div>\n<p><code class=\"language-text\">https://github.com/heroku/heroku-buildpack-nodejs.git</code> is the buildpack for working with NodeJS files. As the react app uses NodeJS, simply adding this buildpack will take care of building the application.</p>\n<p><code class=\"language-text\">https://github.com/heroku/heroku-buildpack-static.git</code> buildpack will take care of configuring the nginx and other stuffs after the app is built.</p>\n<h3>Configuring the deployment</h3>\n<p>The cool thing about <code class=\"language-text\">heroku-buildpack-static</code> is that it supports <a href=\"https://github.com/heroku/heroku-buildpack-static#configuration\">lots of different settings</a>. We just need to add a <code class=\"language-text\">static.json</code> file at the root directory of the app.</p>\n<p>Here’s a simple example,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"root\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"proxies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"/api/\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"origin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://example.com/api\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">root</code> specifies the root folder of the static files. React apps by default output the build files at the <code class=\"language-text\">build</code> directory. So this will configure the nginx to treat the <code class=\"language-text\">build</code> folder as the root.</p>\n<p>The <code class=\"language-text\">proxies</code> option makes it easy to communicate with the API and avoid CORS. The example above will proxy all <code class=\"language-text\">&lt;app-url>/api</code> calls to <code class=\"language-text\">https://example.com/api</code>.</p>\n<p>This makes it really easy to separately deploy the fronend and backend.</p>\n<p>What I would really like is to avoid specifying a public URL. My backend is also running in the same server. So, I would like to proxy my calls to the internal URL of the backend without routing it through a public URL.</p>","frontmatter":{"title":"My first blog post","date":"May 04, 2019","description":null}},"previous":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"New Beginnings"}},"next":null},"pageContext":{"id":"a2ef8c1c-7bc8-56eb-9965-e49d9151d1fe","previousPostId":"b5d57de4-1a2a-5e58-b12c-882c1aee9f24","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}